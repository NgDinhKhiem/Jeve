name: CMake Multi-Platform Build and Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write
  id-token: write

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++

    env:
      BUILD_DIR: ${{ github.workspace }}/build

    steps:
      - uses: actions/checkout@v4

      # Configure CMake on Windows (PowerShell)
      - name: Configure CMake (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          cmake -B $env:BUILD_DIR -S ${{ github.workspace }} `
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} `
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} `
            -DCMAKE_BUILD_TYPE=Release

      # Configure CMake on Linux/macOS (bash)
      - name: Configure CMake (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          cmake -B "$BUILD_DIR" -S "${{ github.workspace }}" \
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
            -DCMAKE_BUILD_TYPE=Release

      # Build on Windows (PowerShell)
      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: cmake --build $env:BUILD_DIR --config Release

      # Build on Linux/macOS (bash)
      - name: Build (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: cmake --build "$BUILD_DIR" --config Release

      # Test on Windows (PowerShell)
      - name: Test (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: ctest --build-config Release --test-dir $env:BUILD_DIR

      # Test on Linux/macOS (bash)
      - name: Test (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: ctest --build-config Release --test-dir "$BUILD_DIR"

      # Upload artifact on Ubuntu only (example)
      - name: Upload build artifact (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v3
        with:
          name: build-ubuntu-${{ matrix.c_compiler }}
          path: ${{ env.BUILD_DIR }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Download build artifact (Ubuntu GCC)
        uses: actions/download-artifact@v3
        with:
          name: build-ubuntu-gcc
          path: build

      - name: Archive build files
        run: |
          cd build
          zip -r ../build_artifact.zip .

      - name: Create or Update Tag
        uses: jimeh/update-tags-action@v1
        with:
          tags: |
            v1.0.0
          when_exists: update
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v1.0.0
          release_name: "Release 1.0.0"
          body: "Release of Jeve"
          draft: false
          prerelease: false
          files: build_artifact.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
