name: CMake Multi-Platform Build and Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_DIR: build

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            label: ubuntu-gcc
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            label: ubuntu-clang
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            label: macos-clang
            c_compiler: clang
            cpp_compiler: clang++
          - os: windows-latest
            label: windows-msvc-x64
            c_compiler: cl
            cpp_compiler: cl
            arch: x64
          - os: windows-latest
            label: windows-msvc-win32
            c_compiler: cl
            cpp_compiler: cl
            arch: Win32
          - os: windows-latest
            label: windows-mingw
            c_compiler: gcc
            cpp_compiler: g++
            mingw: true

    steps:
      - uses: actions/checkout@v4

      - name: Install MinGW (if needed)
        if: matrix.mingw == true
        shell: pwsh
        run: |
          choco install mingw --no-progress
          echo "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin" | Out-File -Append -FilePath $env:GITHUB_PATH

      # Configure for Linux/macOS
      - name: Configure CMake (bash)
        if: runner.os != 'Windows' || matrix.mingw == true
        shell: bash
        run: |
          cmake -B $BUILD_DIR \
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
            -DCMAKE_BUILD_TYPE=Release \
            -S .

      # Configure for MSVC
      - name: Configure CMake (PowerShell, MSVC)
        if: runner.os == 'Windows' && matrix.mingw != true
        shell: pwsh
        run: |
          cmake -B $env:BUILD_DIR `
            -G "Visual Studio 17 2022" `
            -A ${{ matrix.arch }} `
            -DCMAKE_BUILD_TYPE=Release `
            -S .

      # Build step
      - name: Build
        shell: bash
        run: cmake --build $BUILD_DIR --config Release

      # Test step
      - name: Test
        shell: bash
        run: |
          cd $BUILD_DIR
          ctest --build-config Release || echo "Tests failed or not present"

      # Upload build artifacts
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.label }}
          path: ${{ env.BUILD_DIR }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Create directory for collected artifacts
      run: mkdir -p release-files

    # Download artifacts
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: temp/

    # Copy jeve binaries only
    - name: Prepare jeve binaries
      shell: bash
      run: |
        mkdir -p release-files
        for dir in temp/*; do
          label=$(basename "$dir")
          file=$(find "$dir" -type f -name 'jeve*' -executable -o -name 'jeve*.exe' | head -n 1)
          if [[ -n "$file" ]]; then
            cp "$file" "release-files/jeve-${label}"
          fi
        done

    - name: Create or Update Tag
      uses: jimeh/update-tags-action@v1
      with:
        tags: v1.0.0
        when_exists: update
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v1.0.0
        release_name: "Release 1.0.0"
        body: "Release of Jeve Interpreter including MinGW and multiple platforms"
        draft: false
        prerelease: false
        files: release-files/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
