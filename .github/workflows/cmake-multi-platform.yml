name: CMake Multi-Platform Build and Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
env:
  BUILD_DIR: build

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl

    steps:
      - uses: actions/checkout@v4

      # Configure CMake for Linux/macOS (bash shell)
      - name: Configure CMake (bash)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          cmake -B $BUILD_DIR \
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
            -DCMAKE_BUILD_TYPE=Release \
            -S .

      # Configure CMake for Windows (PowerShell)
      - name: Configure CMake (PowerShell)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cmake -B $env:BUILD_DIR `
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} `
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} `
            -DCMAKE_BUILD_TYPE=Release `
            -S .

      # Build for Linux/macOS (bash)
      - name: Build (bash)
        if: runner.os != 'Windows'
        shell: bash
        run: cmake --build $BUILD_DIR --config Release

      # Build for Windows (PowerShell)
      - name: Build (PowerShell)
        if: runner.os == 'Windows'
        shell: pwsh
        run: cmake --build $env:BUILD_DIR --config Release

      # Test for Linux/macOS (bash)
      - name: Test (bash)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          cd $BUILD_DIR
          ctest --build-config Release

      # Test for Windows (PowerShell)
      - name: Test (PowerShell)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Set-Location $env:BUILD_DIR
          ctest --build-config Release

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}-${{ matrix.c_compiler }}
          path: ${{ env.BUILD_DIR }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Create directory for collected artifacts
      run: mkdir -p release-files

    # Download artifacts from each platform
    - name: Download Ubuntu GCC artifact
      uses: actions/download-artifact@v4
      with:
        name: build-ubuntu-latest-gcc
        path: temp/ubuntu-gcc

    - name: Download Ubuntu Clang artifact
      uses: actions/download-artifact@v4
      with:
        name: build-ubuntu-latest-clang
        path: temp/ubuntu-clang

    - name: Download macOS Clang artifact
      uses: actions/download-artifact@v4
      with:
        name: build-macos-latest-clang
        path: temp/macos-clang

    - name: Download Windows MSVC artifact
      uses: actions/download-artifact@v4
      with:
        name: build-windows-latest-cl
        path: temp/windows-cl

    # Copy and rename only jeve files
    - name: Prepare jeve build files
      shell: bash
      run: |
        mkdir -p release-files
        find temp/ubuntu-gcc -type f -name 'jeve*' -exec cp {} release-files/jeve-ubuntu-gcc \;
        find temp/ubuntu-clang -type f -name 'jeve*' -exec cp {} release-files/jeve-ubuntu-clang \;
        find temp/macos-clang -type f -name 'jeve*' -exec cp {} release-files/jeve-macos-clang \;
        find temp/windows-cl -type f -name 'jeve*' -exec cp {} release-files/jeve-windows-cl.exe \;

    - name: Create or Update Tag
      uses: jimeh/update-tags-action@v1
      with:
        tags: v1.0.0
        when_exists: update
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v1.0.0
        release_name: "Release 1.0.0"
        body: "Release of CafeteriaManagerSystem-Backend-1.0-SNAPSHOT"
        draft: false
        prerelease: false
        files: |
          release-files/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
