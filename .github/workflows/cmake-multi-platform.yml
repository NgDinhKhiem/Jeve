name: CMake Multi-Platform Build and Release

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: write
  security-events: write
  id-token: write

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      # Configure CMake on Linux/macOS (bash)
      - name: Configure CMake on Linux/macOS
        if: runner.os != 'Windows'
        shell: bash
        run: |
          cmake -B "${{ steps.strings.outputs.build-output-dir }}" -S "${{ github.workspace }}" \
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

      # Configure CMake on Windows (PowerShell)
      - name: Configure CMake on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cmake -B "${{ steps.strings.outputs.build-output-dir }}" -S "${{ github.workspace }}" `
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} `
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} `
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

      # Build on Linux/macOS
      - name: Build on Linux/macOS
        if: runner.os != 'Windows'
        shell: bash
        run: cmake --build "${{ steps.strings.outputs.build-output-dir }}" --config ${{ matrix.build_type }}

      # Build on Windows
      - name: Build on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: cmake --build "${{ steps.strings.outputs.build-output-dir }}" --config ${{ matrix.build_type }}

      # Test on Linux/macOS
      - name: Test on Linux/macOS
        if: runner.os != 'Windows'
        shell: bash
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --build-config ${{ matrix.build_type }}

      # Test on Windows
      - name: Test on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --build-config ${{ matrix.build_type }}

      # List build directory contents on Linux/macOS
      - name: List build directory contents on Linux/macOS
        if: runner.os != 'Windows'
        shell: bash
        run: |
          echo "Contents of build directory:"
          ls -la "${{ steps.strings.outputs.build-output-dir }}"

      # List build directory contents on Windows
      - name: List build directory contents on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "Contents of build directory:"
          Get-ChildItem -Path "${{ steps.strings.outputs.build-output-dir }}" -Recurse

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Create or Update Tag
        uses: jimeh/update-tags-action@v1
        with:
          tags: |
            v1.0.0
          when_exists: update
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v1.0.0
          release_name: "Release 1.0.0"
          body: "Release of Jeve"
          draft: false
          prerelease: false
          files: |
            build/*.exe
            build/*.dll
            build/*.so
            build/*.dylib
            build/*.a
            build/*.lib
            build/*.out
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
